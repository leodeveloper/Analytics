//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InnonAnalytics.Model.EntityModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InnonAnalyticsEngineEntities : DbContext, IInnonAnalyticsEngineEntities
    {
        public InnonAnalyticsEngineEntities()
            : base("name=InnonAnalyticsEngineEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tblDatabaseLog> tblDatabaseLogs { get; set; }
        public virtual DbSet<tblPoint> tblPoints { get; set; }
        public virtual DbSet<tblDescription> tblDescriptions { get; set; }
        public virtual DbSet<tblLanguage> tblLanguages { get; set; }
        public virtual DbSet<tblLanguageDescription> tblLanguageDescriptions { get; set; }
        public virtual DbSet<tblUnit> tblUnits { get; set; }
        public virtual DbSet<tblConnector> tblConnectors { get; set; }
        public virtual DbSet<tblContainer> tblContainers { get; set; }
        public virtual DbSet<tblTag> tblTags { get; set; }
        public virtual DbSet<tblTagElement> tblTagElements { get; set; }
        public virtual DbSet<tblDashboard> tblDashboards { get; set; }
        public virtual DbSet<tblDatawareHouseMigrationLog> tblDatawareHouseMigrationLogs { get; set; }
        public virtual DbSet<tblChart_Gauge_Range_Color> tblChart_Gauge_Range_Color { get; set; }
        public virtual DbSet<tblDashboard_Widget> tblDashboard_Widget { get; set; }
        public virtual DbSet<tblChart_Gauge> tblChart_Gauge { get; set; }
        public virtual DbSet<tblChart_Bar> tblChart_Bar { get; set; }
        public virtual DbSet<tblTag_Type_Mapping> tblTag_Type_Mapping { get; set; }
        public virtual DbSet<tblElement> tblElements { get; set; }
        public virtual DbSet<tblChart_Metric> tblChart_Metric { get; set; }
        public virtual DbSet<tblChart_Donut> tblChart_Donut { get; set; }
        public virtual DbSet<tblChart_Pie> tblChart_Pie { get; set; }
        public virtual DbSet<tblChart_Stacked> tblChart_Stacked { get; set; }
        public virtual DbSet<tblChart_TreeMap> tblChart_TreeMap { get; set; }
        public virtual DbSet<tblChart_Heatmap> tblChart_Heatmap { get; set; }
        public virtual DbSet<tblMetric> tblMetrics { get; set; }
        public virtual DbSet<tblChart_Counter> tblChart_Counter { get; set; }
        public virtual DbSet<tblHomePage_Widget> tblHomePage_Widget { get; set; }
        public virtual DbSet<AspNetUserDashboard> AspNetUserDashboards { get; set; }
        public virtual DbSet<AspNetUserMetric> AspNetUserMetrics { get; set; }
        public virtual DbSet<tblChart_Line> tblChart_Line { get; set; }
        public virtual DbSet<tblElement_Extension> tblElement_Extension { get; set; }
        public virtual DbSet<AspNetUserElement> AspNetUserElements { get; set; }
        public virtual DbSet<tblAudit> tblAudits { get; set; }
        public virtual DbSet<tblNote> tblNotes { get; set; }
    
        public virtual ObjectResult<tblPoint> GetTableName(string serverName, string userName, string password, string dataBaseName)
        {
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var dataBaseNameParameter = dataBaseName != null ?
                new ObjectParameter("DataBaseName", dataBaseName) :
                new ObjectParameter("DataBaseName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblPoint>("GetTableName", serverNameParameter, userNameParameter, passwordParameter, dataBaseNameParameter);
        }
    
        public virtual ObjectResult<tblPoint> GetTableName(string serverName, string userName, string password, string dataBaseName, MergeOption mergeOption)
        {
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var dataBaseNameParameter = dataBaseName != null ?
                new ObjectParameter("DataBaseName", dataBaseName) :
                new ObjectParameter("DataBaseName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblPoint>("GetTableName", mergeOption, serverNameParameter, userNameParameter, passwordParameter, dataBaseNameParameter);
        }
    
        public virtual int GetRawData(string serverName, string userName, string password, string dataBaseName, string tableName, Nullable<System.DateTime> timeStamp_From, Nullable<System.DateTime> timeStamp_To)
        {
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var dataBaseNameParameter = dataBaseName != null ?
                new ObjectParameter("DataBaseName", dataBaseName) :
                new ObjectParameter("DataBaseName", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var timeStamp_FromParameter = timeStamp_From.HasValue ?
                new ObjectParameter("TimeStamp_From", timeStamp_From) :
                new ObjectParameter("TimeStamp_From", typeof(System.DateTime));
    
            var timeStamp_ToParameter = timeStamp_To.HasValue ?
                new ObjectParameter("TimeStamp_To", timeStamp_To) :
                new ObjectParameter("TimeStamp_To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRawData", serverNameParameter, userNameParameter, passwordParameter, dataBaseNameParameter, tableNameParameter, timeStamp_FromParameter, timeStamp_ToParameter);
        }
    }
}
