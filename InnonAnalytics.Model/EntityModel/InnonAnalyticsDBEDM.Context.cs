//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InnonAnalytics.Model.EntityModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InnonAnalyticsDBEntities : DbContext
    {
        public InnonAnalyticsDBEntities()
            : base("name=InnonAnalyticsDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblLanguage> tblLanguages { get; set; }
        public virtual DbSet<tblDescription> tblDescriptions { get; set; }
        public virtual DbSet<tblLanguageDescription> tblLanguageDescriptions { get; set; }
        public virtual DbSet<tblConnector> tblConnectors { get; set; }
        public virtual DbSet<tblElement> tblElements { get; set; }
        public virtual DbSet<tblPoint> tblPoints { get; set; }
    
        public virtual ObjectResult<tblPoint> GetTableName(string serverName, string userName, string password, string dataBaseName)
        {
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var dataBaseNameParameter = dataBaseName != null ?
                new ObjectParameter("DataBaseName", dataBaseName) :
                new ObjectParameter("DataBaseName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblPoint>("GetTableName", serverNameParameter, userNameParameter, passwordParameter, dataBaseNameParameter);
        }
    
        public virtual ObjectResult<tblPoint> GetTableName(string serverName, string userName, string password, string dataBaseName, MergeOption mergeOption)
        {
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var dataBaseNameParameter = dataBaseName != null ?
                new ObjectParameter("DataBaseName", dataBaseName) :
                new ObjectParameter("DataBaseName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblPoint>("GetTableName", mergeOption, serverNameParameter, userNameParameter, passwordParameter, dataBaseNameParameter);
        }
    }
}
