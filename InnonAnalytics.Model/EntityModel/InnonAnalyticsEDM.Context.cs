//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InnonAnalytics.Model.EntityModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InnonAnalyticsEntities : DbContext
    {
        public InnonAnalyticsEntities()
            : base("name=InnonAnalyticsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Attribute> Attributes { get; set; }
        public virtual DbSet<AttributeType> AttributeTypes { get; set; }
        public virtual DbSet<AttributeTypeElementType> AttributeTypeElementTypes { get; set; }
        public virtual DbSet<AttributeTypeValue> AttributeTypeValues { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<DataSourceElement> DataSourceElements { get; set; }
        public virtual DbSet<DataSourceType> DataSourceTypes { get; set; }
        public virtual DbSet<DBLog> DBLogs { get; set; }
        public virtual DbSet<Description> Descriptions { get; set; }
        public virtual DbSet<Element> Elements { get; set; }
        public virtual DbSet<ElementType> ElementTypes { get; set; }
        public virtual DbSet<Formula> Formulae { get; set; }
        public virtual DbSet<FormulaItem> FormulaItems { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LanguageDescription> LanguageDescriptions { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<ScheduleHour> ScheduleHours { get; set; }
        public virtual DbSet<SelectionRole> SelectionRoles { get; set; }
        public virtual DbSet<SelectionType> SelectionTypes { get; set; }
        public virtual DbSet<SelectionTypeValue> SelectionTypeValues { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<DATASCHEMA> DATASCHEMAs { get; set; }
    
        public virtual ObjectResult<DATASCHEMA> GetElementData(string serverName, string userName, string password, string dataBaseName, string tableNames, string formDate, string toDate, string rollup, string interval, string rollUpFunction)
        {
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var dataBaseNameParameter = dataBaseName != null ?
                new ObjectParameter("DataBaseName", dataBaseName) :
                new ObjectParameter("DataBaseName", typeof(string));
    
            var tableNamesParameter = tableNames != null ?
                new ObjectParameter("TableNames", tableNames) :
                new ObjectParameter("TableNames", typeof(string));
    
            var formDateParameter = formDate != null ?
                new ObjectParameter("FormDate", formDate) :
                new ObjectParameter("FormDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var rollupParameter = rollup != null ?
                new ObjectParameter("Rollup", rollup) :
                new ObjectParameter("Rollup", typeof(string));
    
            var intervalParameter = interval != null ?
                new ObjectParameter("Interval", interval) :
                new ObjectParameter("Interval", typeof(string));
    
            var rollUpFunctionParameter = rollUpFunction != null ?
                new ObjectParameter("RollUpFunction", rollUpFunction) :
                new ObjectParameter("RollUpFunction", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DATASCHEMA>("GetElementData", serverNameParameter, userNameParameter, passwordParameter, dataBaseNameParameter, tableNamesParameter, formDateParameter, toDateParameter, rollupParameter, intervalParameter, rollUpFunctionParameter);
        }
    
        public virtual ObjectResult<DATASCHEMA> GetElementData(string serverName, string userName, string password, string dataBaseName, string tableNames, string formDate, string toDate, string rollup, string interval, string rollUpFunction, MergeOption mergeOption)
        {
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var dataBaseNameParameter = dataBaseName != null ?
                new ObjectParameter("DataBaseName", dataBaseName) :
                new ObjectParameter("DataBaseName", typeof(string));
    
            var tableNamesParameter = tableNames != null ?
                new ObjectParameter("TableNames", tableNames) :
                new ObjectParameter("TableNames", typeof(string));
    
            var formDateParameter = formDate != null ?
                new ObjectParameter("FormDate", formDate) :
                new ObjectParameter("FormDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var rollupParameter = rollup != null ?
                new ObjectParameter("Rollup", rollup) :
                new ObjectParameter("Rollup", typeof(string));
    
            var intervalParameter = interval != null ?
                new ObjectParameter("Interval", interval) :
                new ObjectParameter("Interval", typeof(string));
    
            var rollUpFunctionParameter = rollUpFunction != null ?
                new ObjectParameter("RollUpFunction", rollUpFunction) :
                new ObjectParameter("RollUpFunction", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DATASCHEMA>("GetElementData", mergeOption, serverNameParameter, userNameParameter, passwordParameter, dataBaseNameParameter, tableNamesParameter, formDateParameter, toDateParameter, rollupParameter, intervalParameter, rollUpFunctionParameter);
        }
    }
}
