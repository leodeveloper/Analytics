@using Resources;
@model InnonAnalytics.Model.DTO.ConnectorDTO

 <!--Partial view does not need the antiforgeytoken, it is in the parent page-->

@using (Ajax.BeginForm("DataConnection_TestConnection", "DataConnection", null, new { @class = "form-horizontal", @id = "frmConnection", role = "form",  enctype = "multipart/form-data" }))
{
  
    <!--Partial view does not need the antiforgeytoken, it is in the parent page-->
    <div id="loading-indicator" style="display:none;" role="alert"></div>
    <table id="tblConnection" class="table table-condensed" style="width:100%" >

   
        <tr>
            <td colspan="2">@Html.ValidationSummary(true, "", new { @class = "text-danger" })</td>
        </tr>

        <tr>
            <td>@Resources.ConnectorType</td>
            <td>
                @( Html.Kendo().DropDownListFor(m => m.DataConnectorType)
            .Name("DataConnectorType")
        .DataTextField("Text")
        .DataValueField("Value")
        //     .ValuePrimitive(false)
    .OptionLabel(new { Text = @Resources.DropDownConnectorSelect, Value = 0 })
       .HtmlAttributes(new { data_value_primitive = "false" })
                .BindTo(InnonAnalytics.Common.ExtensionMethod.EnumToSelectList(typeof(InnonAnalytics.Common.Enums.DataSouceConnectionType)))
                                    .Events(events => { events.Select("OnSelect"); })
            )


        </td>
    </tr>
    <tr>
        <td>@Resources.GatewayType</td>
        <td>
            @( Html.Kendo().DropDownListFor(m => m.GatewayType)
        .Name("GatewayType")
        .DataTextField("Text")
        .DataValueField("Value")
        .OptionLabel(@Resources.DropDownGatewaySelect)
    .HtmlAttributes(new { data_value_primitive = "false" })
                .BindTo(InnonAnalytics.Common.ExtensionMethod.EnumToSelectList(typeof(InnonAnalytics.Common.Enums.DataGatewayType)))
        //  .Events(events => { events.Select("OnSelect"); })
            )


        </td>
    </tr>
    <tr>
        <td>@Resources.ConnectorName</td>

        <td>
            @Html.TextBoxFor(m => m.ConnectionName, new { @class = "form-control input-sm" })
            @Html.ValidationMessageFor(x => x.ConnectionName, "", new { @class = "text-danger" })
        </td>
        <td> </td>
    </tr>
    <tr>
        <td>@Resources.ConnectorServer</td>
        <td>
            @Html.TextBoxFor(model => model.ServerOrIP, new { @class = "form-control input-sm" })
            @Html.ValidationMessageFor(model => model.ServerOrIP, "", new { @class = "text-danger" })
        </td>
    </tr>
    @*<tr>
        <td>@Resources.ConnectorPort</td>
        <td>
            @Html.TextBoxFor(model => model.PortNumber, new { @class = "form-control input-sm" })
            @Html.ValidationMessageFor(model => model.PortNumber, "", new { @class = "text-danger" })
        </td>
    </tr>*@
    <tr>
        <td>@Resources.ConnectorUserName</td>
        <td>
            @Html.TextBoxFor(model => model.ServerUserName, new { @class = "form-control input-sm" })
            @Html.ValidationMessageFor(model => model.ServerUserName, "", new { @class = "text-danger" })
        </td>
    </tr>
    <tr>
        <td>@Resources.ConnectorPassword</td>
        <td>
            @Html.PasswordFor(model => model.ServerPassword, new { @value = Model.ServerPassword, @class = "form-control input-sm" })
            @Html.ValidationMessageFor(model => model.ServerPassword, "", new { @class = "text-danger" })
        </td>

    </tr>


    <tr class="_database">
        <td>@Resources.ConnectorDatabaseName</td>
        <td>
            @Html.TextBoxFor(model => model.DatabaseName, new { @class = "form-control input-sm" })
            @*@Html.ValidationMessageFor(model => model.strDatabaseName, "", new { @class = "text-danger" })*@
        </td>
    </tr>


    <tr class="_ftp">
        <td>@Resources.ConnectorFTPDefaultFolder</td>
        <td>
            @Html.TextBoxFor(model => model.DefaultPath, new { @class = "form-control input-sm" })
            @*@Html.ValidationMessageFor(model => model.strDatabaseName, "", new { @class = "text-danger" })*@
        </td>
    </tr>
    <tr class="_ftp">
        <td>@Resources.ConnectorFTPMode</td>
        <td>
            @( Html.Kendo().DropDownListFor(m => m.Mode)
            .Name("Mode")
        .DataTextField("Text")
        .DataValueField("Value")
    .OptionLabel(@Resources.DropDownFTPModeSelect)
.HtmlAttributes(new { data_value_primitive = "false" })
                .BindTo(InnonAnalytics.Common.ExtensionMethod.EnumToSelectList(typeof(InnonAnalytics.Common.Enums.FTPMode)))
            )
        </td>
    </tr>

    <tr class="_api">
        <td>@Resources.ConnectorAPI</td>
        <td>
            @Html.TextBoxFor(model => model.PrivateKey, new { @class = "form-control input-sm" })
            @*@Html.ValidationMessageFor(model => model.strDatabaseName, "", new { @class = "text-danger" })*@
        </td>
    </tr>

    <tr>
        <td>@Resources.ConnectorActive</td>
        <td>
            @Html.CheckBoxFor(model => model.IsActive, new { @value = Model.IsActive, @class = "form-control input-sm" })
        </td>
    </tr>
    <!--Test Connection button is in the connector.js (inside the function called "insertPopupCaption")-->
</table>
}







