@using Resources
@model InnonAnalytics.Model.DTO.DashboardDTO
@{
    //ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<link href="~/Content/customdatetime/css/daterangepicker.css" rel="stylesheet" />
<script src="~/Content/customdatetime/js/moment.min.js"></script>
<script src="~/Content/customdatetime/js/jquery.daterangepicker.js"></script>
<!--the following xdomain request for the ie9 and ie8-->
<script src="http://cdnjs.cloudflare.com/ajax/libs/jquery-ajaxtransport-xdomainrequest/1.0.3/jquery.xdomainrequest.min.js"></script>
@*<script src="~/Scripts/application/settings.js"></script>*@

<script>
    waitingmessage = '@Resources.PleaseWait';
</script>

<script src="@Url.Content("~/Scripts/application/loading.js")" type="text/javascript"></script>
<script src="http://code.highcharts.com/highcharts.js"></script>
<script src="http://code.highcharts.com/modules/exporting.js"></script>
<script src="~/Scripts/application/bar_chart.js"></script>
<script src="~/Scripts/application/bar_fixed_placement_chart.js"></script>

<ol class="breadcrumb pull-right">
    <li><a href="javascript:;">Home</a></li>
    <li><a href="javascript:;">Dashboard</a></li>
    <li class="active">Dashboard</li>
</ol>
<h1 class="page-header">@Model.Title<small></small></h1>

<div class="row">
    <div class="col-md-2">
        <div class="btn-group ">
            <a href="javascript:;" class="btn btn-success btn-xs m-l-0">Action</a>
            <a href="javascript:;" data-toggle="dropdown" class="btn btn-success btn-xs m-l-0 dropdown-toggle" aria-expanded="false">
                <span class="caret"></span>
            </a>
            <ul class="dropdown-menu pull-right">
                <li><a href="#" data-toggle="modal" id="addnew_widget" class="btn btn-theme btn-xs m-0">Share</a></li>
                <li class="divider"></li>
                <li><a href="#" id="btn_Reset_Layout" class="btn btn-danger btn-xs m-r-0">Reset layout</a></li>
                <li class="divider"></li>
                <li><a href="#modal-dialog2" data-toggle="modal" id="btn_customize_layout" class="btn btn-success btn-xs m-r-0">Customize layout</a></li>
                <li class="divider"></li>
                <li><a href="#" data-toggle="modal" id="addnew_widget" class="btn btn-success btn-xs m-r-0">Export</a></li>
                <li class="divider"></li>
                <li><a href="#" data-toggle="modal" id="addnew_widget" class="btn btn-danger btn-xs m-r-0">Delete</a></li>
            </ul>
        </div>
        <a href="#modal-dialog1" data-toggle="modal" id="addnew_widget" class="btn btn-success btn-xs m-l-0">+ Add widget</a><br />
        <div id="loading-indicator" style="display:none" role="alert"></div>

    </div>   
   
    <div class="col-md-10">
        <div class="pull-right"><table>
    <tr>
        <td><div class="input-group"><span class="form-control" id="date-range18"></span><span id="date-range18-open" class="input-group-addon"><i class="fa fa-calendar"></i></span></div></td>
    </tr>
            <tr>
                <td>
                    @Html.Hidden("fromdate")
                    @Html.Hidden("todate")
                </td>
            </tr>
</table>

<table>
    <tr>
        <td><span id="date-range18-container"></span></td>
    </tr>
</table></div>
      
  </div>
   
</div>
<br />
<div id="dashboard_widgets">

</div>
@if (Model.Dashboard_Widgets.Any(widget => !widget.Is_Deleted))
{
    int j = 0;
    if (Model.Layout_Option == 1)
    {
       
    }
    else if (Model.Layout_Option == 2 || Model.Layout_Option ==0)
    {
        foreach (var dashboard_widget in Model.Dashboard_Widgets.Where(widget => !widget.Is_Deleted))
        {
            <div class="row">
                <div class="col-md-12 ui-sortable">
                    <!-- begin panel -->
                    @if(dashboard_widget.Chart_Type == InnonAnalytics.Common.Enums.ChartType.Gauge)
                    {
                        @(Html.Partial("Chart/_RadialGauge", dashboard_widget))
                    }
                    else if (dashboard_widget.Chart_Type == InnonAnalytics.Common.Enums.ChartType.TreeMap)
                    {
                        @(Html.Partial("Chart/_TreeMap", dashboard_widget))
                    }
                    else if (dashboard_widget.Chart_Type == InnonAnalytics.Common.Enums.ChartType.Bar)
                    {                       

                        @(Html.Partial("Chart/_Bar", dashboard_widget))
                    }
                    else if (dashboard_widget.Chart_Type == InnonAnalytics.Common.Enums.ChartType.BarFixedPlacement)
                    {
                        
                        @(Html.Partial("Chart/_BarFixedPlacement", dashboard_widget))
                    }
                    else if (dashboard_widget.Chart_Type == InnonAnalytics.Common.Enums.ChartType.Pie)
                    {
                        @(Html.Partial("Chart/_Pie", dashboard_widget))
                    }
                    else if (dashboard_widget.Chart_Type == InnonAnalytics.Common.Enums.ChartType.Donut)
                    {
                        @(Html.Partial("Chart/_Donut", dashboard_widget))
                    }
                    else if (dashboard_widget.Chart_Type == InnonAnalytics.Common.Enums.ChartType.Stacked)
                    {
                        @(Html.Partial("Chart/_Stacked", dashboard_widget))
                    }
                    else if (dashboard_widget.Chart_Type == InnonAnalytics.Common.Enums.ChartType.HeatMap)
                    {
                         @(Html.Partial("Chart/_HeatMap", dashboard_widget))
                    }                    
                    else
                    {
                        <div>No widget available</div>
                    }              
                    <!-- end panel -->
                </div>
                <div class="col-md-6 ui-sortable">
                    <div class="panel panel-inverse"></div>
                </div>
            </div>
        }

        
            }
            else if (Model.Layout_Option == 3)
            {
            
            }
            else if (Model.Layout_Option == 4)
            {
            
            }
            }
            else
            {
    
    if(Model.Id == 2001)
    {
        <div class="col-md-12">
        @Html.Partial("~/Views/Shared/_Dashboard_Fixed_Gauge.cshtml")
            </div>
    }
    else if (Model.Id == 2000)
    {
        <div class="col-md-12">
        @Html.Partial("~/Views/Shared/_Dashboard_Fixed_Chart.cshtml")
            </div>
        
    }
    else
    {
           <div class="col-md-12">
                @*No widget available for this dashboard*@


                <div class="row">
                    <div class="col-md-12 ui-sortable">
                        <!-- begin panel -->
                        <div class="panel panel-inverse" id="46546465" >
                            <div class="panel-heading">
                                <div class="panel-heading-btn">
                                    <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-default" data-click="panel-expand"><i class="fa fa-expand"></i></a>
                                    <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-success" data-click="panel-reload"><i class="fa fa-repeat"></i></a>
                                    <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-default" data-click="panel-widget-edit-option"><i class="fa fa-gear"></i></a>
                                    @*<a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-danger" data-click="panel-remove"><i class="fa fa-times"></i></a>*@
                                </div>
                                <h4 class="panel-title">Energy Generation</h4>
                            </div>
                            <div class="panel-body">
                                @Html.Partial("~/Views/Shared/Chart/_Diagram.cshtml")
                            </div>
                        </div>
                        <!-- end panel -->
                    </div>
                    <div class="col-md-4 ui-sortable">
                        <div class="panel">
                        </div>
                    </div>
                </div>

            </div>
    }
         
            }






            <!--#modal-dialog for add edit new widget-->

            <div class="modal fade" id="modal-dialog1">
                <div style="width:75%" class="modal-dialog">
                    <div style="width:100%" class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                            <h4 class="modal-title">Create a new dashboard</h4>
                        </div>
                        <div class="modal-body">
                            <div id="dashboad_widget">

                            </div>
                        </div>
                        @*<div class="modal-footer">
                <a href="javascript:;" class="btn btn-sm btn-white" data-dismiss="modal">Close</a>
                <a href="javascript:;" class="btn btn-sm btn-success">Add Widget</a>
            </div>*@
                    </div>
                </div>
            </div>

            <!--#modal-dialog-->
            <!--#modal-dialog for customize layout-->

            <div class="modal fade" id="modal-dialog2">
                <div class="modal-dialog">
                    <div  class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                            <h4 class="modal-title">Customize layout</h4>
                        </div>
                        <div class="modal-body">
                            <div id="customize_layout">

                            </div>
                        </div>
                        @*<div class="modal-footer">
                                <a href="javascript:;" class="btn btn-sm btn-white" data-dismiss="modal">Close</a>
                                <a href="javascript:;" class="btn btn-sm btn-success">Add Widget</a>
                            </div>*@
                    </div>
                </div>
            </div>

   <script>

    var base_api_url = window.ApplicationSettings.ApiURL();
    //var url = base_api_url + '/API/Widget/Get_Data_By_Chart';
    var current_bar = 0;
    var current_bar_fixedplacement = 0;
    var current_guage = 0;
    var current_tree = 0;
    var current_heatmap = 0;
    var current_pie = 0;
    var current_stacked = 0;
    var current_donut = 0;

    var list_of_gauge = [];
    var list_of_bar = [];
    var list_of_bar_fixed_placement = [];
    var list_of_tree_map = [];
    var list_of_heat_map = [];
    var list_of_pie = [];
    var list_of_Stacked = [];
    var list_of_donut = [];

    function guage(guage_id, div_gauge_total_id, div_gauge_total_target, widget_loading_div_id) {
        this.guage_id = guage_id;
        this.div_gauge_total_id = div_gauge_total_id;
        this.div_gauge_total_target = div_gauge_total_target;
        this.widget_loading_div_id = widget_loading_div_id;
    }

    function heatmap(heatmap_id, widget_loading_div_id, div_heatmap_id, chart_title) {
        this.heatmap_id = heatmap_id;
        this.widget_loading_div_id = widget_loading_div_id;
        this.div_heatmap_id = div_heatmap_id;
        this.chart_title = chart_title;
    }

    function bar(bar_id, widget_loading_div_id, div_bar_id, chart_title) {
        this.bar_id = bar_id;
        this.widget_loading_div_id = widget_loading_div_id;
        this.div_bar_id = div_bar_id;
        this.chart_title = chart_title;
    }

    function pie(pie_id, widget_loading_div_id, div_pie_id, chart_title) {
        this.pie_id = pie_id;
        this.widget_loading_div_id = widget_loading_div_id;
        this.div_pie_id = div_pie_id;
        this.chart_title = chart_title;
    }

    function donut(donut_id, donutchart_footer_id ,widget_loading_div_id, div_donut_id, chart_title) {
        this.donut_id = donut_id;
        this.donutchart_footer_id = donutchart_footer_id;
        this.widget_loading_div_id = widget_loading_div_id;
        this.div_donut_id = div_donut_id;
        this.chart_title = chart_title;
    }

    function stacked(stacked_id, widget_loading_div_id, div_stacked_id, chart_title) {
        this.stacked_id = stacked_id;
        this.widget_loading_div_id = widget_loading_div_id;
        this.div_stacked_id = div_stacked_id;
        this.chart_title = chart_title;
    }

    function bar_Fixedplacement(bar_id, widget_loading_div_id, div_bar_id, chart_title) {
        this.bar_id = bar_id;
        this.widget_loading_div_id = widget_loading_div_id;
        this.div_bar_id = div_bar_id;
        this.chart_title = chart_title;
    }

    function treemap(treemap_id, div_tree_map_id, widget_loading_div_id) {
        this.treemap_id = treemap_id;
        this.div_tree_map_id = div_tree_map_id;
        this.widget_loading_div_id = widget_loading_div_id;
    }


    deletemesg = "@Resources.WidgetDeleteMes";

    $(document).ready(function () {


        $(document).ajaxStart(function () {
            OnBegin();
        }).ajaxStop(function () {
            Hide();
        });




        //run the AJAX function for the first time once `document.ready` fires
        // do_ajax();

        $('#date-range18').dateRangePicker(
{

    startOfWeek: 'monday',
    separator: ' to ',
    format: 'DD/MM/YYYY HH:mm',
    autoClose: false,
    showShortcuts: true,
    inline: false,
    alwaysOpen: false,
    applyBtnClass: '',
    // container: '#date-range18-container',
    //    shortcuts:
    //{
    //    'prev-days': [1, 3, 5, 7],
    //    'next-days': [3, 5, 7],
    //    'prev': ['week', 'month', 'year'],
    //    'next': ['week', 'month', 'year']
    //},

    customShortcuts:
    [
        //if return an array of two dates, it will select the date range between the two dates
        {
            name: 'this week',
            dates: function () {
                var start = moment().day(0).toDate();
                var end = moment().day(6).toDate();
                // start.setDate(1);
                // end.setDate(30);
                return [start, end];
            }
        },
        ////if only return an array of one date, it will display the month which containing the date. and it will not select any date range
        //{
        //    name: 'Oct 2014',
        //    dates : function()
        //    {
        //        //move calendars to show this date's month and next month
        //        var movetodate = moment('2014-10','YYYY-MM').toDate();
        //        return [movetodate];
        //    }
        //}
    ],

    time: {
        enabled: true
    },

    getValue: function () {
        return this.innerHTML;
    },
    setValue: function (s) {
        this.innerHTML = s;
    }
})
            .bind('datepicker-apply', function (event, obj) {
                $("#fromdate").val(obj.date1.toISOString());
                $("#todate").val(obj.date2.toISOString());
                do_ajax();
                //  Fixed_Gague();

            }).bind('datepicker-first-date-selected', function (event, obj) {
                /* This event will be triggered when first date is selected */
                // console.log(obj);
                // obj will be something like this:
                // {
                // 		date1: (Date object of the earlier date)
                // }
            })
.bind('datepicker-change', function (event, obj) {
    /* This event will be triggered when second date is selected */
    // console.log(obj);
    // obj will be something like this:
    // {
    // 		date1: (Date object of the earlier date),
    // 		date2: (Date object of the later date),
    //	 	value: "2013-06-05 to 2013-06-07"
    // }
});


        var fromdate = moment().add('days', -30).format("DD/MM/YYYY HH:mm:ss");
        var todate = moment().format("DD/MM/YYYY HH:mm:ss");

        $('#date-range18').data('dateRangePicker').setDateRange(fromdate, todate);

        var fromdate1 = moment(fromdate, "DD/MM/YYYY hh:mm:ss");
        var todate1 = moment(todate, "DD/MM/YYYY hh:mm:ss");

        //Please must resolve the issue of +1 add , Check this link http://stackoverflow.com/questions/13817108/asp-net-web-api-datetime-format
        $("#fromdate").val(fromdate1.format());
        $("#todate").val(todate1.format());

        do_ajax();


        $('#addnew_widget').live('click', function () {
            Add_New_Widget('@Model.Id');
        });

        $('#btn_customize_layout').live('click', function () {
            Customize_Dashboard_Layout('@Model.Id');
        });

        $('#btn_Update_Layout').live('click', function () {


            var localStorageName = window.location.href;
            localStorageName = localStorageName.split('?');
            localStorageName = localStorageName[0];
            localStorage.removeItem(localStorageName);

            $("#frm_dashboard_layout").submit();
        });

        $('#btn_Reset_Layout').live('click', function () {


            var localStorageName = window.location.href;
            localStorageName = localStorageName.split('?');
            localStorageName = localStorageName[0];
            localStorage.removeItem(localStorageName);
            window.location.href = document.URL;

        });


        //This shuold be remove
        //This for the Fixed gague page



    });




                function do_ajax() {

                   

        //  list_of_bar = [];
        //  list_of_gauge = [];
        //check to make sure there are more requests to make
                    if (current_bar < list_of_bar.length) {                     

            $("#" + list_of_bar[current_bar].widget_loading_div_id).html("<img src=\"/Content/images/loading.gif\" />");      

            //make the AJAX request with the given data from the `ajaxes` array of objects
            $.ajax({

                url: base_api_url + '/API/Widget/Get_Data_By_Chart',
                data: { 'chart_type': '@InnonAnalytics.Common.Enums.ChartType.Bar', 'chart_id': list_of_bar[current_bar].bar_id, 'from_date': $("#fromdate").val(), 'to_date': $("#todate").val() },
                type: "GET",               
                dataType: "json",
                cache: false,

                success: function (serverResponse) {

                    $("#" + list_of_bar[current_bar].widget_loading_div_id).html("");
                    returnedData = serverResponse.Data;
                  //  console.log(returnedData);
                    populate_bar_chart(returnedData, list_of_bar[current_bar].div_bar_id, list_of_bar[current_bar].chart_title);
                    //increment the `current` counter and recursively call this function again
                    current_bar++;
                    do_ajax();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    current_bar++;
                    do_ajax();
                }
            });
        }
        else if (current_heatmap < list_of_heat_map.length) {

            $("#" + list_of_heat_map[current_heatmap].widget_loading_div_id).html("<img src=\"/Content/images/loading.gif\" />");

            //make the AJAX request with the given data from the `ajaxes` array of objects
            $.ajax({

                url: base_api_url + '/API/Widget/Get_Data_By_Chart',
                data: { 'chart_type': '@InnonAnalytics.Common.Enums.ChartType.HeatMap', 'chart_id': list_of_heat_map[current_heatmap].heatmap_id, 'from_date': $("#fromdate").val(), 'to_date': $("#todate").val() },
                type: "GET",
                dataType: "json",
                cache: false,

                success: function (serverResponse) {

                    $("#" + list_of_heat_map[current_heatmap].widget_loading_div_id).html("");
                    returnedData = serverResponse.Data;
                    //console.log(returnedData);
                    //console.log(list_of_heat_map[current_heatmap].div_heatmap_id);
                    $("#csv2").html('');
                    var strdata = "Date, Time, Temperature" + "\n";
                    $.each(returnedData.Json_String, function (k, v) {
                        strdata += v + "\n";
                    });

                    $("#csv2").append(strdata);

                    BindHighChart(list_of_heat_map[current_heatmap].div_heatmap_id, returnedData.MinValue, returnedData.MaxValue);

                    //increment the `current` counter and recursively call this function again
                    current_heatmap++;
                    do_ajax();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    current_heatmap++;
                    do_ajax();
                }
            });
        }
        else if (current_bar_fixedplacement < list_of_bar_fixed_placement.length) {

            $("#" + list_of_bar_fixed_placement[current_bar_fixedplacement].widget_loading_div_id).html("<img src=\"/Content/images/loading.gif\" />");

            //make the AJAX request with the given data from the `ajaxes` array of objects
            $.ajax({

                url: base_api_url + '/API/Widget/Get_Data_By_Chart',
                data: { 'chart_type': '@InnonAnalytics.Common.Enums.ChartType.BarFixedPlacement', 'chart_id': list_of_bar_fixed_placement[current_bar_fixedplacement].bar_id, 'from_date': $("#fromdate").val(), 'to_date': $("#todate").val() },
                type: "GET",
                dataType: "json",
                cache: false,

                success: function (serverResponse) {

                    $("#" + list_of_bar_fixed_placement[current_bar_fixedplacement].widget_loading_div_id).html("");
                    returnedData = serverResponse.Data;
                    //  console.log(returnedData);
                    populate_fixed_placement_chart(returnedData, list_of_bar_fixed_placement[current_bar_fixedplacement].div_bar_id, list_of_bar_fixed_placement[current_bar_fixedplacement].chart_title);

                    //DrawBarChart(returnedData)

                    //increment the `current` counter and recursively call this function again
                    current_bar_fixedplacement++;
                    do_ajax();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    current_bar_fixedplacement++;
                    do_ajax();
                }
            });
        }
        else if (current_pie < list_of_pie.length) {

            $("#" + list_of_pie[current_pie].widget_loading_div_id).html("<img src=\"/Content/images/loading.gif\" />");

            //make the AJAX request with the given data from the `ajaxes` array of objects
            $.ajax({

                url: base_api_url + '/API/Widget/Get_Data_By_Chart',
                data: { 'chart_type': '@InnonAnalytics.Common.Enums.ChartType.Pie', 'chart_id': list_of_pie[current_pie].pie_id, 'from_date': $("#fromdate").val(), 'to_date': $("#todate").val() },
                type: "GET",
                dataType: "json",
                cache: false,

                success: function (serverResponse) {
                    $("#" + list_of_pie[current_pie].widget_loading_div_id).html("");
                    var ResponseData = serverResponse.Data;
                    populate_Pie_Chart(list_of_pie[current_pie].div_pie_id, ResponseData.data);
                    //increment the `current` counter and recursively call this function again
                    current_pie++;
                    do_ajax();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    current_pie++;
                    do_ajax();
                }
            });
        }
        else if (current_donut < list_of_donut.length) {

            $("#" + list_of_donut[current_donut].widget_loading_div_id).html("<img src=\"/Content/images/loading.gif\" />");

            //make the AJAX request with the given data from the `ajaxes` array of objects
            $.ajax({

                url: base_api_url + '/API/Widget/Get_Data_By_Chart',
                data: { 'chart_type': '@InnonAnalytics.Common.Enums.ChartType.Donut', 'chart_id': list_of_donut[current_donut].donut_id, 'from_date': $("#fromdate").val(), 'to_date': $("#todate").val() },
                type: "GET",
                dataType: "json",
                cache: false,

                success: function (serverResponse) {
                    $("#" + list_of_donut[current_donut].widget_loading_div_id).html("");
                    var ResponseData = serverResponse.Data;
                    populate_donut_Chart(list_of_donut[current_donut].div_donut_id, list_of_donut[current_donut].donutchart_footer_id, ResponseData.data);
                    //increment the `current` counter and recursively call this function again
                    current_donut++;
                    do_ajax();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    $("#" + list_of_donut[current_donut].widget_loading_div_id).html("Error in loading chart");
                    current_donut++;
                    do_ajax();
                }
            });
        }
        else if (current_stacked < list_of_Stacked.length) {

            $("#" + list_of_Stacked[current_stacked].widget_loading_div_id).html("<img src=\"/Content/images/loading.gif\" />");

            //make the AJAX request with the given data from the `ajaxes` array of objects
            $.ajax({

                url: base_api_url + '/API/Widget/Get_Data_By_Chart',
                data: { 'chart_type': '@InnonAnalytics.Common.Enums.ChartType.Stacked', 'chart_id': list_of_Stacked[current_stacked].stacked_id, 'from_date': $("#fromdate").val(), 'to_date': $("#todate").val() },
                type: "GET",
                dataType: "json",
                cache: false,

                success: function (serverResponse) {
                    $("#" + list_of_Stacked[current_stacked].widget_loading_div_id).html("");
                    var ResponseData = serverResponse;
                    populate_Stacked_Chart(list_of_Stacked[current_stacked].div_stacked_id, ResponseData.Data);
                    //increment the `current` counter and recursively call this function again
                    current_stacked++;
                    do_ajax();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    current_stacked++;
                    do_ajax();
                }
            });
        }
        else if (current_guage < list_of_gauge.length) {

            $("#" + list_of_gauge[current_guage].widget_loading_div_id).html("<img src=\"/Content/images/loading.gif\" />");
            var calpercentage = 0;
            $.ajax({


                url: base_api_url + '/API/Widget/Get_Data_By_Chart',
                data: { 'chart_type': '@InnonAnalytics.Common.Enums.ChartType.Gauge', 'chart_id': list_of_gauge[current_guage].guage_id, 'from_date': $("#fromdate").val(), 'to_date': $("#todate").val() },
                type: "GET",
                dataType: "json",
                cache: false,

                success: function (serverResponse) {
                    returnedData = serverResponse.Data;
                 //   console.log(returnedData);
                    $("#" + list_of_gauge[current_guage].div_gauge_total_id).text(returnedData.Sum_Value_String);
                    $("#" + list_of_gauge[current_guage].div_gauge_total_target).text(returnedData.Sum_Value_Target_String);
                    $("#" + list_of_gauge[current_guage].widget_loading_div_id).html("");

                    if (returnedData.Sum_Value > 0 && returnedData.Sum_Value_Target > 0) {
                        calpercentage = (returnedData.Sum_Value / returnedData.Sum_Value_Target) * 100;
                    }

                    $("#div-per-" + list_of_gauge[current_guage].guage_id).text(calpercentage.toFixed(2));
                    $("#gauge-" + list_of_gauge[current_guage].guage_id).data("kendoRadialGauge").value(calpercentage);
                    //increment the `current` counter and recursively call this function again
                    current_guage++;
                    do_ajax();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    $("#" + list_of_gauge[current_guage].widget_loading_div_id).html("");
                    $("#" + list_of_gauge[current_guage].div_gauge_total_id).text(0);
                    $("#" + list_of_gauge[current_guage].div_gauge_total_target).text(0);
                    $("#div-per-" + list_of_gauge[current_guage].guage_id).text(0);
                    $("#gauge-" + list_of_gauge[current_guage].guage_id).data("kendoRadialGauge").value(calpercentage);

                    current_guage++;
                    do_ajax();

                }
            });
        }
        else if (current_tree < list_of_tree_map.length) {
            $("#" + list_of_tree_map[current_tree].widget_loading_div_id).html("<img src=\"/Content/images/loading.gif\" />");
            $.ajax({


                url: base_api_url + '/API/Widget/Get_Data_By_Chart',
                data: { 'chart_type': '@InnonAnalytics.Common.Enums.ChartType.TreeMap', 'chart_id': list_of_tree_map[current_tree].treemap_id, 'from_date': $("#fromdate").val(), 'to_date': $("#todate").val() },
                type: "GET",
                dataType: "json",
                cache: false,

                success: function (serverResponse) {

                    $("#" + list_of_tree_map[current_tree].widget_loading_div_id).html("");

                    var return_data = [{name: "No Data",value: 0,Items: []}];
                    if (serverResponse.Data !== null && serverResponse.Data !== undefined)
                    {
                        return_data = jQuery.parseJSON('[' + JSON.stringify(serverResponse.Data) + ']');
                    }                     
                    var dataSource = new kendo.data.HierarchicalDataSource({
                        data: return_data,
                        schema: {
                            model: {
                                children: "Items"
                            }
                        }
                    });
                    var treeMap = $("#" + list_of_tree_map[current_tree].div_tree_map_id).getKendoTreeMap();
                    treeMap.setDataSource(dataSource);
                    current_tree++;
                    do_ajax();
                },
                error: function (xhr, ajaxOptions, thrownError) {

                    var return_data = [{ name: "No Data", value: 0, Items: [] }];
                    var dataSource = new kendo.data.HierarchicalDataSource({
                        data: return_data,
                        schema: {
                            model: {
                                children: "Items"
                            }
                        }
                    });
                    var treeMap = $("#" + list_of_tree_map[current_tree].div_tree_map_id).getKendoTreeMap();
                    treeMap.setDataSource(dataSource);

                }
            });
        }
        else {
            current_bar = 0;
            current_guage = 0;
            current_tree = 0;
            current_bar_fixedplacement = 0;
            current_heatmap = 0;
            current_pie = 0;
            current_stacked = 0;
            current_donut = 0;

            try {
                Fixed_Gague();
            }
            catch (err) {

            }
            try {
                do_ajax_diagram();
            }
            catch (err) {

            }

            

        }
                }



    function Add_New_Widget(dashboard_id) {
        $.ajax({
            url: '@(Url.Action("../Dashboard/Add_Dashboard_Widget"))',
            data: { 'dashboard_Id': dashboard_id },
            type: "GET",
            dataType: "html",
            cache: false,
            success: function (data) {
                $('#dashboad_widget').html(data); //write the dialog content into the diaog container
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Error');
            }
        });
    }

    function Edit_Dashboard_Widget(dashboard_id, widget_id) {
        $.ajax({
            url: '@(Url.Action("../Dashboard/Edit_Dashboard_Widget"))',
            data: { 'dashboard_Id': dashboard_id, 'widget_Id': widget_id },
            type: "GET",
            dataType: "html",
            cache: false,
            success: function (data) {
                $('#dashboad_widget').html(data); //write the dialog content into the diaog container
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Error');
            }
        });
    }

    function Get_Widgets_By_Dashboard_Id(dashboard_id) {
        $.ajax({
            url: '@(Url.Action("../Dashboard/Get_Dashboard_Widgets_By_Dashboard_Id"))',
            data: { 'dashboard_Id': dashboard_id },
            type: "GET",
            dataType: "json",
            cache: false,
            success: function (data) {
                $.each(data, function (key, val) {
                    //console.log(val.Name_Widget);
                });
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Error');
            }
        });
    }


    //Section start for the Partial View _Customize_Dashboard_Layout

    function Customize_Dashboard_Layout(dashboard_id) {
        $.ajax({
            url: '@(Url.Action("../Dashboard/Customize_Dashboard_Layout"))',
            //data: { 'dashboard_Id': dashboard_id },
            type: "GET",
            dataType: "html",
            cache: false,
            success: function (data) {
                $('#customize_layout').html(data); //write the dialog content into the diaog container
                //set the dahboard_id in the hiddin field
                $("#Dashboard_Id").val(dashboard_id);
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Error');
            }
        });
    }

    function Customize_layout_onDataBound(arg) {
        var widget = this;
        widget.items().each(function (_, item) {
            var data = widget.dataItem(item);

            if (data.Item1 == '@Model.Layout_Option') {
                $("#Layout_Id").val(data.Item1);
                widget.select(item);
            }
        });

        //remove this handler
        widget.unbind("dataBound", arguments.callee);
    }

    function Customize_layout_onChange() {
        var index = this.select().index(),
           dataItem = this.dataSource.view()[index];
        $("#Layout_Id").val(dataItem.Item1);
    }

    //Section Ends

</script>






